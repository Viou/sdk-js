(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{111:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),p=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(t),u=a,m=l["".concat(s,".").concat(u)]||l[u]||b[u]||i;return t?r.a.createElement(m,o(o({ref:n},d),{},{components:t})):r.a.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=t[d];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},90:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(111)),s={title:"Axios Resources"},o={unversionedId:"api/axios-resources",id:"api/axios-resources",isDocsHomePage:!1,title:"Axios Resources",description:"A package providing a base authorizations class to help check which permissions a user has.",source:"@site/docs/api/axios-resources.md",slug:"/api/axios-resources",permalink:"/sdk-js/api/axios-resources",editUrl:"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/api/axios-resources.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/sdk-js/api/getting-started"},next:{title:"Codes",permalink:"/sdk-js/api/definitions/codes"}},c=[{value:"Table of Contents",id:"table-of-contents",children:[{value:"<code>AvUser</code>",id:"avuser",children:[]},{value:"<code>AvRegions</code>",id:"avregions",children:[]},{value:"<code>AvPermissions</code>",id:"avpermissions",children:[]},{value:"<code>AvUserPermissions</code>",id:"avuserpermissions",children:[]},{value:"<code>AvSpaces</code>",id:"avspaces",children:[]},{value:"<code>AvOrganizations</code>",id:"avorganizations",children:[]},{value:"<code>AvProviders</code>",id:"avproviders",children:[]},{value:"<code>AvLogMessage</code>",id:"avlogmessage",children:[]},{value:"<code>AvPdfs</code>",id:"avpdfs",children:[]},{value:"<code>AvProxy</code>",id:"avproxy",children:[]},{value:"<code>AvFiles</code>",id:"avfiles",children:[]},{value:"<code>AvFilesDelivery</code>",id:"avfilesdelivery",children:[]},{value:"<code>AvSettings</code>",id:"avsettings",children:[]},{value:"<code>AvDisclaimers</code>",id:"avdisclaimers",children:[]},{value:"<code>AvSlotMachine</code>",id:"avslotmachine",children:[]}]}],d={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A package providing a base authorizations class to help check which permissions a user has."),Object(i.b)("h1",{id:"availity-apis"},"Availity API's"),Object(i.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avuser"},"AvUser")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avregions"},"AvRegions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avpermissions"},"AvPermissions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avuserpermissions"},"AvUserPermissions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avspaces"},"AvSpaces")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avorganizations"},"AvOrganizations")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avproviders"},"AvProviders")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avlogmessage"},"AvLogMessage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avproxy"},"AvProxy")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avfiles"},"AvFiles")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avfilesdelivery"},"AvFilesDelivery")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#avsettings"},"AvSettings"))),Object(i.b)("p",null,"All axios resources will have the same basic exported class structure as below. For each resource, replace the ",Object(i.b)("inlineCode",{parentName:"p"},"class")," with the resource name as well as ",Object(i.b)("inlineCode",{parentName:"p"},"name")," in ",Object(i.b)("inlineCode",{parentName:"p"},"options")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"export default class AvPermissions extends AvApi {\n  constructor({ http, promise, merge, config }) {\n    const options = {\n      path: 'api/sdk/platform',\n      name: 'permissions',\n      ...config,\n    };\n    super({\n      http,\n      promise,\n      merge,\n      config: options,\n    });\n  }\n")),Object(i.b)("h3",{id:"avuser"},Object(i.b)("inlineCode",{parentName:"h3"},"AvUser")),Object(i.b)("p",null,"Get information about current logged in user."),Object(i.b)("h4",{id:"exported-class"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"name")," in ",Object(i.b)("inlineCode",{parentName:"p"},"options")," as ",Object(i.b)("inlineCode",{parentName:"p"},"users")),Object(i.b)("h4",{id:"methods"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"    me(config) {\n    return this.get('me', config).then(response => response.data);\n    }\n")),Object(i.b)("p",null,"Helper function that returns information about logged in user."),Object(i.b)("h3",{id:"avregions"},Object(i.b)("inlineCode",{parentName:"h3"},"AvRegions")),Object(i.b)("p",null,"Gets the logged in user's current selected region as well as the regions the user is associated with."),Object(i.b)("h4",{id:"exported-class-1"},"Exported Class"),Object(i.b)("p",null,"Add ",Object(i.b)("inlineCode",{parentName:"p"},"avUsers")," to the ",Object(i.b)("inlineCode",{parentName:"p"},"constructor"),". Add ",Object(i.b)("inlineCode",{parentName:"p"},"sessionBust: false")," and ",Object(i.b)("inlineCode",{parentName:"p"},"pagebust: true")," to ",Object(i.b)("inlineCode",{parentName:"p"},"options"),". Include ",Object(i.b)("inlineCode",{parentName:"p"},"this.avUsers = avUsers")," before ",Object(i.b)("inlineCode",{parentName:"p"},"constructor")," closes. ",Object(i.b)("inlineCode",{parentName:"p"},"name")," in ",Object(i.b)("inlineCode",{parentName:"p"},"options")," as ",Object(i.b)("inlineCode",{parentName:"p"},"regions"),"."),Object(i.b)("h4",{id:"methods-1"},"Methods"),Object(i.b)("h5",{id:"afterupdateresponse"},Object(i.b)("inlineCode",{parentName:"h5"},"afterUpdate(response)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   afterUpdate(response) {\n    this.setPageBust();\n    return response;\n  }\n")),Object(i.b)("h5",{id:"getregionsconfig"},Object(i.b)("inlineCode",{parentName:"h5"},"getRegions(config)")),Object(i.b)("p",null,"Get regions for logged in user."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getRegions(config) {\n    if (!this.avUsers || !this.avUsers.me) {\n      throw new Error('avUsers must be defined');\n    }\n    return this.avUsers.me().then(user => {\n      const queryConfig = this.addParams({ userId: user.id }, config);\n      return this.query(queryConfig);\n    });\n  }\n")),Object(i.b)("h5",{id:"getcurrentregion"},Object(i.b)("inlineCode",{parentName:"h5"},"getCurrentRegion()")),Object(i.b)("p",null,"Returns just the current region for the logged in user."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getCurrentRegion() {\n    return this.query({\n      params: {\n        currentlySelected: true,\n      },\n    });\n  }\n")),Object(i.b)("h3",{id:"avpermissions"},Object(i.b)("inlineCode",{parentName:"h3"},"AvPermissions")),Object(i.b)("p",null,"Get permissions belonging to the logged in user."),Object(i.b)("h4",{id:"exported-class-2"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"name")," in ",Object(i.b)("inlineCode",{parentName:"p"},"options")," as ",Object(i.b)("inlineCode",{parentName:"p"},"permissions")),Object(i.b)("h4",{id:"methods-2"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getPermissions(id, region) {\n    return this.query({\n      params: { id, region },\n    });\n  }\n")),Object(i.b)("h3",{id:"avuserpermissions"},Object(i.b)("inlineCode",{parentName:"h3"},"AvUserPermissions")),Object(i.b)("p",null,"Get permissions as well as resources of the logged in user."),Object(i.b)("h4",{id:"exported-class-3"},"Exported Class"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"import qs from 'qs';\nimport AvApi from '../api';\n\nexport default class AvUserPermissions extends AvApi {\n  constructor({ http, promise, merge, config }) {\n    const options = {\n      path: 'api/internal',\n      name: 'axi-user-permissions',\n      paramsSerializer: params =>\n        qs.stringify(params, { arrayFormat: 'repeat' }),\n      ...config,\n    };\n    super({\n      http,\n      promise,\n      merge,\n      config: options,\n    });\n  }\n")),Object(i.b)("h4",{id:"methods-3"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   afterQuery(response) {\n    return response && response.data && response.data.axiUserPermissions\n      ? response.data.axiUserPermissions\n      : [];\n  }\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getPermissions(permissionId, region) {\n    return this.query({\n      params: { permissionId, region },\n    });\n  }\n")),Object(i.b)("h3",{id:"avspaces"},Object(i.b)("inlineCode",{parentName:"h3"},"AvSpaces")),Object(i.b)("p",null,"Get metadata for the various content types for the Spaces platform."),Object(i.b)("h4",{id:"exported-classes"},"Exported Classes"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"name")," in ",Object(i.b)("inlineCode",{parentName:"p"},"options")," as ",Object(i.b)("inlineCode",{parentName:"p"},"spaces")),Object(i.b)("h4",{id:"methods-4"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   parseSpaceId(query) {\n    const pairs = query.substr(1).split('&');\n\n    let spaceId = '';\n\n    if (Array.isArray(pairs)) {\n      pairs.forEach(item => {\n        const pair = item.split('=');\n        const key = pair[0];\n        if (key === 'spaceId') {\n          spaceId = pair[1] && decodeURIComponent(pair[1]);\n        }\n      });\n    }\n    return spaceId;\n  }\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getSpaceName(spaceId) {\n    if (!spaceId) {\n      throw new Error('[spaceId] must be defined');\n    }\n    return this.get(spaceId).then(response => response.data.name);\n  }\n")),Object(i.b)("h3",{id:"avorganizations"},Object(i.b)("inlineCode",{parentName:"h3"},"AvOrganizations")),Object(i.b)("p",null,"Service that allows you to get logged=in user's active organizations."),Object(i.b)("h4",{id:"exported-class-4"},"Exported Class"),Object(i.b)("p",null,"Add ",Object(i.b)("inlineCode",{parentName:"p"},"avUsers")," into constructor. Add ",Object(i.b)("inlineCode",{parentName:"p"},"this.avUsers = avUsers")," before ",Object(i.b)("inlineCode",{parentName:"p"},"constructor")," closes."),Object(i.b)("h4",{id:"methods-5"},"Methods"),Object(i.b)("h5",{id:"queryorganizationsuser-config"},Object(i.b)("inlineCode",{parentName:"h5"},"queryOrganizations(user, config)")),Object(i.b)("p",null,"Returns organizations belonging to the ",Object(i.b)("inlineCode",{parentName:"p"},"user"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   queryOrganizations(user, config) {\n       const queryConfig = this.addParams({ userId: user.id }, config);\n    return this.query(queryConfig);\n  }\n")),Object(i.b)("h5",{id:"getorganizationsconfig"},Object(i.b)("inlineCode",{parentName:"h5"},"getOrganizations(config)")),Object(i.b)("p",null,"Returns organizations belonging to the logged in user."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getOrganizations(config) {\n       if (config && config.params && config.params.userId) {\n           return this.query(config);\n    }\n\n    if (!this.avUsers || !this.avUsers.me) {\n        throw new Error('avUsers must be defined');\n    }\n\n    return this.avUsers\n      .me()\n      .then(user => this.queryOrganizations(user, config));\n  }\n")),Object(i.b)("h5",{id:"postgetdata-config-additionalpostgetargs"},Object(i.b)("inlineCode",{parentName:"h5"},"postGet(data, config, additionalPostGetArgs)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"async postGet(data, config) {\n    if (additionalPostGetArgs) {\n      const { data: organizationsData } = await super.postGet(\n        data,\n        config\n      );\n\n      return this.getFilteredOrganizations(\n        organizationsData,\n        additionalPostGetArgs,\n        data\n      );\n    }\n\n    return super.postGet(data, config);\n  }\n")),Object(i.b)("h5",{id:"getfilteredorganizationsorganizationsdata-additionalpostgetargs-restqueryparams"},Object(i.b)("inlineCode",{parentName:"h5"},"getFilteredOrganizations(organizationsData, additionalPostGetArgs, restQueryParams)")),Object(i.b)("p",null,"Returns organizations belonging to the logged in user that also have specified ",Object(i.b)("inlineCode",{parentName:"p"},"resources"),". Meant to be called by ",Object(i.b)("inlineCode",{parentName:"p"},"AvOrganizationSelect"),", but can be called directly if you already have ",Object(i.b)("inlineCode",{parentName:"p"},"organizations")," data."),Object(i.b)("h5",{id:"please-note-that-pagination-will-not-occur-for-organizationsdata-when-getfilteredorganizations-is-called-directly-if-pagination-is-needed-use-avorganizationselect-with-the-resourceids-prop-or-postgetdata-config-additionalpostgetargs-where-additionalpostgetargs-is-an-object-containing-the-resourceids-prop"},"Please note that pagination will not occur for ",Object(i.b)("inlineCode",{parentName:"h5"},"organizationsData")," when ",Object(i.b)("inlineCode",{parentName:"h5"},"getFilteredOrganizations")," is called directly. If pagination is needed, use ",Object(i.b)("inlineCode",{parentName:"h5"},"AvOrganizationSelect")," with the ",Object(i.b)("inlineCode",{parentName:"h5"},"resourceIds")," prop or ",Object(i.b)("inlineCode",{parentName:"h5"},"postGet(data, config, additionalPostGetArgs)"),", where ",Object(i.b)("inlineCode",{parentName:"h5"},"additionalPostGetArgs")," is an object containing the ",Object(i.b)("inlineCode",{parentName:"h5"},"resourceIds")," prop."),Object(i.b)("p",null,"Arguments should be structured as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"organizationsData: {\n    organizations, // Array of organization objects\n    limit,\n    offset,\n    totalCount\n},\nadditionalPostGetArgs: {\n    resourceIds // string or array of strings\n},\ndata: {\n    permissionId,\n    region\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"  async getFilteredOrganizations(\n    organizationsData,\n    additionalPostGetArgs,\n    data\n  ) {\n    const { resourceIds } = additionalPostGetArgs;\n    const { permissionId, region } = data;\n    const {\n      organizations,\n      limit: orgLimit,\n      offset: orgOffset,\n      totalCount: totalOrgCount,\n    } = organizationsData;\n\n    if (typeof permissionId !== 'string' && !Array.isArray(permissionId)) {\n      throw new TypeError(\n        'permissionId must be either an array of ids or a string'\n      );\n    }\n    if (typeof resourceIds !== 'string' && !Array.isArray(resourceIds)) {\n      throw new TypeError(\n        'resourceIds must be either an array of ids or a string'\n      );\n    }\n\n    // resourceIds is passed as readOnly, convert so that we can use Array methods on it\n    const resourceIdsArray =\n      typeof resourceIds === 'string' ? [resourceIds] : resourceIds;\n\n    if (\n      region !== this.previousRegionId ||\n      !this.arePermissionsEqual(permissionId)\n    ) {\n      // avUserPermissions will return a list of user organizations that match given permission and region\n      // This call does not need to be paginated and\n      // we should not need to call it every time we paginate orgs if region and permissions are the same\n      // Limit is set to permissionId.length because that represents maximum results we can get back\n      const {\n        data: { axiUserPermissions: userPermissions },\n      } = await this.avUserPermissions.postGet({\n        permissionId,\n        region,\n        limit: permissionId.length,\n      });\n\n      if (userPermissions) {\n        this.userPermissions = userPermissions;\n        this.previousPermissionIds = permissionId;\n        this.previousRegionId = region;\n      } else {\n        throw new Error('avUserPermissions call failed');\n      }\n    }\n\n    // Reduce the userPermissions result into a collection of orgs that contain a valid resource\n    const authorizedOrgs = this.userPermissions.reduce(\n      (accum, userPermission) => {\n        userPermission.organizations.forEach(userOrg => {\n          const isDuplicate = accum.some(item => item.id === userOrg.id);\n          if (!isDuplicate) {\n            // If this org contains one of the passed in resourceIds, it is an authorized org\n            const match = userOrg.resources.some(userResource => {\n              return resourceIdsArray.some(\n                resource => Number(resource) === Number(userResource.id)\n              );\n            });\n            if (match) {\n              accum.push({ id: userOrg.id });\n            }\n          }\n        });\n\n        return accum;\n      },\n      []\n    );\n\n    // avUserPermissions call doesn't return much useful organization data\n    // but we can match valid ids to useful data returned from avOrganizations\n    const authorizedFilteredOrgs = organizations.filter(org =>\n      authorizedOrgs.some(authorizedOrg => authorizedOrg.id === org.id)\n    );\n\n    // Transform back into data object that ResourceSelect can use and paginate\n    return {\n      data: {\n        authorizedFilteredOrgs,\n        totalCount: totalOrgCount,\n        limit: orgLimit,\n        offset: orgOffset,\n      },\n    };\n  }\n\n  arePermissionsEqual(permissionId) {\n    if (typeof permissionId !== typeof this.previousPermissionIds) return false;\n\n    if (typeof permissionId === 'string')\n      return permissionId === this.previousPermissionIds;\n\n    if (\n      Array.isArray(permissionId) &&\n      Array.isArray(this.previousPermissionIds)\n    ) {\n      if (permissionId.length !== this.previousPermissionIds.length)\n        return false;\n\n      // if lengths are equal, need a way to check if values are the same or not\n      // Sets won't allow duplicate values\n      // if size of Set is greater than length of original arrays\n      // then a different value was inserted and they are not equal\n      const idSet = new Set([...permissionId], [...this.previousPermissionIds]);\n      if (idSet.size !== permissionId.length) return false;\n\n      return true;\n    }\n\n    return false;\n  }\n")),Object(i.b)("h3",{id:"avproviders"},Object(i.b)("inlineCode",{parentName:"h3"},"AvProviders")),Object(i.b)("p",null,"Get providers associated to the logged in user's organization."),Object(i.b)("h4",{id:"exported-classes-1"},"Exported Classes"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"path")," as ",Object(i.b)("inlineCode",{parentName:"p"},"api/internal"),". ",Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"providers")),Object(i.b)("h4",{id:"methods-6"},"Methods"),Object(i.b)("h5",{id:"getproviderscustomerid-config"},Object(i.b)("inlineCode",{parentName:"h5"},"getProviders(customerId, config)")),Object(i.b)("p",null,"Helper method that gets the providers for the ",Object(i.b)("inlineCode",{parentName:"p"},"customerId"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getProviders(customerId, config) {\n    const queryConfig = this.addParams({ customerId }, config);\n    return this.query(queryConfig);\n  }\n")),Object(i.b)("h5",{id:"normalizeproviders"},Object(i.b)("inlineCode",{parentName:"h5"},"normalize(providers)")),Object(i.b)("p",null,"Helper method that adds ",Object(i.b)("inlineCode",{parentName:"p"},"name")," field to the ",Object(i.b)("inlineCode",{parentName:"p"},"providers")," collection. The name field is computed from other properies of the provider object."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   normalize(providers) {\n    const cloned = providers.slice();\n\n    cloned.forEach(provider => {\n      provider.name = provider.businessName\n        ? provider.businessName\n        : `${provider.lastName}, ${provider.firstName}`;\n    });\n\n    return cloned;\n  }\n")),Object(i.b)("h3",{id:"avlogmessage"},Object(i.b)("inlineCode",{parentName:"h3"},"AvLogMessage")),Object(i.b)("p",null,"Create a log message."),Object(i.b)("h4",{id:"exported-class-5"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"import flattenObject from '../flattenObject'")),Object(i.b)("p",null,"No ",Object(i.b)("inlineCode",{parentName:"p"},"path")," in the constructor. ",Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"log-messages")),Object(i.b)("h4",{id:"methods-7"},"Methods"),Object(i.b)("p",null,"All methods take a key value object. A key named 'level` determines the log level type in the logs."),Object(i.b)("h5",{id:"sendlevelentires"},Object(i.b)("inlineCode",{parentName:"h5"},"send(level,entires)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   send(level, entries) {\n    delete entries.level;\n    const payload = { level, entries };\n    const flattened = flattenObject(payload);\n    return Object.keys(flattened).reduce((accum, key) => {\n      accum.append(key, flattened[key]);\n      return accum;\n    }, new FormData());\n  }\n")),Object(i.b)("h5",{id:"debugkeyvalue"},Object(i.b)("inlineCode",{parentName:"h5"},"debug(keyValue)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   debug(entries) {\n    return this.sendBeacon(this.send('debug', entries));\n  }\n")),Object(i.b)("h5",{id:"infokeyvalue"},Object(i.b)("inlineCode",{parentName:"h5"},"info(keyValue)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   info(entries) {\n    return this.sendBeacon(this.send('info', entries));\n  }\n")),Object(i.b)("h5",{id:"warnkeyvalue"},Object(i.b)("inlineCode",{parentName:"h5"},"warn(keyValue)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   warn(entries) {\n    return this.sendBeacon(this.send('warn', entries));\n  }\n")),Object(i.b)("h5",{id:"errorkeyvalue"},Object(i.b)("inlineCode",{parentName:"h5"},"error(keyValue)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   error(entries) {\n    return this.sendBeacon(this.send('error', entries));\n  }\n")),Object(i.b)("h3",{id:"avpdfs"},Object(i.b)("inlineCode",{parentName:"h3"},"AvPdfs")),Object(i.b)("h4",{id:"exported-class-6"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"path")," as ",Object(i.b)("inlineCode",{parentName:"p"},"api/utils"),". ",Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"pdfs"),"."),Object(i.b)("h4",{id:"methods-8"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   onPdf(response) {\n    window.location = response.data.links.pdf.href;\n  }\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getPdf(data, config) {\n    if (!data.applicationId || !data.fileName || !data.html) {\n      throw new Error('[applicationId], [fileName] and [html] must be defined');\n    }\n\n    return this.post(data, config).then(this.onPdf);\n  }\n")),Object(i.b)("h3",{id:"avproxy"},Object(i.b)("inlineCode",{parentName:"h3"},"AvProxy")),Object(i.b)("p",null,"Create API definitions for services that are proxied to a tenant's API gateway."),Object(i.b)("h4",{id:"exported-class-7"},"Exported Class"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"import AvApi from '../api';\n\nexport default class AvProxy extends AvApi {\n    constructor({ http, promise, merge, config }) {\n        if (!config || !config.tenant) {\n            throw new Error('Must specify tenant name for Proxy');\n        }\n        const options = {\n            path: `api/v1/proxy/${config.tenant}`,\n            version: '',\n            ...config,\n        };\n        super({\n            http,\n            promise,\n            merge,\n            config: options,\n        });\n    }\n}\n")),Object(i.b)("h4",{id:"options"},"Options"),Object(i.b)("h5",{id:"tenant"},Object(i.b)("inlineCode",{parentName:"h5"},"tenant")),Object(i.b)("p",null,"The Spaces platform customer name which is used as part of the url for API's proxied to 3rd party API gateway."),Object(i.b)("h3",{id:"avfiles"},Object(i.b)("inlineCode",{parentName:"h3"},"AvFiles")),Object(i.b)("p",null,"Upload a file to a bucket in the vault"),Object(i.b)("h4",{id:"exported-class-8"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"core/vault/upload/v1"),". No ",Object(i.b)("inlineCode",{parentName:"p"},"path"),". ",Object(i.b)("inlineCode",{parentName:"p"},"headers")," as ",Object(i.b)("inlineCode",{parentName:"p"},"{'Content-Type': undefined}")),Object(i.b)("h4",{id:"methods-9"},"Methods"),Object(i.b)("h4",{id:"uploadfiledata-config"},Object(i.b)("inlineCode",{parentName:"h4"},"uploadFile(data, config)")),Object(i.b)("p",null,"Method to upload a file. ",Object(i.b)("inlineCode",{parentName:"p"},"data")," contains FormData elements with a key of either ",Object(i.b)("inlineCode",{parentName:"p"},"reference")," (if pointed to an existing file) or ",Object(i.b)("inlineCode",{parentName:"p"},"filedata")," (if uploading a new file)\n",Object(i.b)("inlineCode",{parentName:"p"},"config")," should contain ",Object(i.b)("inlineCode",{parentName:"p"},"customerId"),", ",Object(i.b)("inlineCode",{parentName:"p"},"id")," (the bucketId), and ",Object(i.b)("inlineCode",{parentName:"p"},"clientId")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   uploadFile(data, config) {\n    if (!config.customerId || !config.clientId) {\n      throw new Error(\n        '[config.customerId] and [config.clientId] must be defined'\n      );\n    }\n    config = this.config(config);\n    config.headers['X-Availity-Customer-ID'] = config.customerId;\n    config.headers['X-Client-ID'] = config.clientId;\n\n    return this.create(data, config);\n  }\n")),Object(i.b)("h3",{id:"avfilesdelivery"},Object(i.b)("inlineCode",{parentName:"h3"},"AvFilesDelivery")),Object(i.b)("p",null,"Upload a batch of files to a designated channel configured on the server."),Object(i.b)("h4",{id:"exported-class-9"},"Exported Class"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"\nimport AvMicroservice from '../ms';\n\nexport default class AvFilesDelivery extends AvMicroservice {\n  constructor({ http, promise, merge, config }) {\n    const options = {\n      name: 'platform/file-upload-delivery/v1/batch/deliveries',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      polling: true,\n      pollingMethod: 'GET',\n      ...config,\n    };\n    super({\n      http,\n      promise,\n      merge,\n      config: options,\n    });\n  }\n")),Object(i.b)("h4",{id:"methods-10"},"Methods"),Object(i.b)("h4",{id:"uploadfilesdeliverydata-config"},Object(i.b)("inlineCode",{parentName:"h4"},"uploadFilesDelivery(data, config)")),Object(i.b)("p",null,"Method to upload a batch of file deliveries. ",Object(i.b)("inlineCode",{parentName:"p"},"data")," contains an array of ",Object(i.b)("inlineCode",{parentName:"p"},"deliveries"),". Provide the ",Object(i.b)("inlineCode",{parentName:"p"},"fileUri")," (reference field from AvFiles), ",Object(i.b)("inlineCode",{parentName:"p"},"deliveryChannel"),", and the required ",Object(i.b)("inlineCode",{parentName:"p"},"metadata")," for that channel."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   uploadFilesDelivery(data, config) {\n    if (!config.customerId || !config.clientId) {\n      throw new Error(\n        '[config.customerId] and [config.clientId] must be defined'\n      );\n    }\n    config = this.config(config);\n    config.headers['X-Availity-Customer-ID'] = config.customerId;\n    config.headers['X-Client-ID'] = config.clientId;\n\n    return this.create(data || {}, config);\n  }\n")),Object(i.b)("p",null,"Example ",Object(i.b)("inlineCode",{parentName:"p"},"data"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'data = { deliveries: [ { fileURI: upload.references[0], deliveryChannel: \'DEMO\',\nmetadata: { payerId: "PAYERID", requestId: "123", patientLastName: "lastName",\npatientFirstName: "firstName" }, } ] };\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"config")," should contain ",Object(i.b)("inlineCode",{parentName:"p"},"customerId")," and ",Object(i.b)("inlineCode",{parentName:"p"},"clientId")),Object(i.b)("h4",{id:"example-response"},"Example Response"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'{ "id": "123456", // batchId "status": "COMPLETE", // COMPLETE/INPROGRESS\n"deliveries": [ { "id": "56789", // deliveryId "deliveryBatchId": "123456",\n"fileURI":\n<fileUri\n    >, "deliveryChannel": "DEMO", "deliveryStatus": "ERRORED", //\n    INPROGRESS/REJECTED/ERRORED/DELIVERED "errors": [ { "message": "error\n    message", "subject": "subject of error" } ], "metadata": { payerId:\n    "PAYERID", requestId: "123", patientLastName: "lastName", patientFirstName:\n    "firstName" } } ] }</fileUri\n>\n')),Object(i.b)("h4",{id:"getlocationresponse"},Object(i.b)("inlineCode",{parentName:"h4"},"getLocation(response)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getLocation(response) {\n    const baseUrl = super.getLocation(response.config);\n    return `${baseUrl}/${response.data.id}`;\n  }\n")),Object(i.b)("h3",{id:"avsettings"},Object(i.b)("inlineCode",{parentName:"h3"},"AvSettings")),Object(i.b)("p",null,"Store and retrieve settings to be reused.\nUse ",Object(i.b)("inlineCode",{parentName:"p"},"query(params)")," with at least an ",Object(i.b)("inlineCode",{parentName:"p"},"applicationId")," in the ",Object(i.b)("inlineCode",{parentName:"p"},"params")," object\nUse ",Object(i.b)("inlineCode",{parentName:"p"},"update(data)")," with at least an ",Object(i.b)("inlineCode",{parentName:"p"},"applicationId")," in the ",Object(i.b)("inlineCode",{parentName:"p"},"scope")," object, and key/value pairs of data"),Object(i.b)("h4",{id:"exported-class-10"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"path")," as ",Object(i.b)("inlineCode",{parentName:"p"},"api/utils"),". ",Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"settings")," . Add ",Object(i.b)("inlineCode",{parentName:"p"},"sessionBust: false")," and ",Object(i.b)("inlineCode",{parentName:"p"},"pageBust: false")," to ",Object(i.b)("inlineCode",{parentName:"p"},"options"),". Add ",Object(i.b)("inlineCode",{parentName:"p"},"avUsers")," to ",Object(i.b)("inlineCode",{parentName:"p"},"constructor"),". Add ",Object(i.b)("inlineCode",{parentName:"p"},"this.avUsers = avUsers")," before ",Object(i.b)("inlineCode",{parentName:"p"},"constructor")," cloes."),Object(i.b)("h4",{id:"methods-11"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getApplication(applicationId, config) {\n    if (!applicationId) {\n      throw new Error('applicationId must be defined');\n    }\n    if (!this.avUsers || !this.avUsers.me) {\n      throw new Error('avUsers must be defined');\n    }\n\n    if (config && config.params && config.params.userId) {\n      const queryConfig = this.addParams({ applicationId }, config);\n      return this.query(queryConfig);\n    }\n\n    return this.avUsers.me().then(user => {\n      const queryConfig = this.addParams(\n        { applicationId, userId: user.id },\n        config\n      );\n      return this.query(queryConfig);\n    });\n  }\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   setApplication(applicationId, data, config) {\n    if (!this.avUsers || !this.avUsers.me) {\n      throw new Error('avUsers must be defined');\n    }\n\n    if (\n      typeof applicationId !== 'string' &&\n      typeof applicationId !== 'number'\n    ) {\n      config = data;\n      data = applicationId;\n      applicationId = '';\n    }\n\n    if (!applicationId && (!data || !data.scope || !data.scope.applicationId)) {\n      throw new Error('applicationId must be defined');\n    }\n\n    if (data && data.scope && data.scope.userId) {\n      data.scope.applicationId = applicationId;\n      return this.update(data, config);\n    }\n\n    return this.avUsers.me().then(user => {\n      data = data || {};\n      data.scope = data.scope || {};\n      data.scope.applicationId = applicationId;\n      data.scope.userId = user.id;\n      return this.update(data, config);\n    });\n  }\n")),Object(i.b)("h3",{id:"avdisclaimers"},Object(i.b)("inlineCode",{parentName:"h3"},"AvDisclaimers")),Object(i.b)("p",null,"Get disclaimers for payer space"),Object(i.b)("h4",{id:"exported-class-11"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"/disclaimers")),Object(i.b)("h4",{id:"methods-12"},"Methods"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   getDisclaimers(id, config) {\n    const queryConfig = this.addParams({ id }, config);\n    return this.query(queryConfig);\n  }\n")),Object(i.b)("h3",{id:"avslotmachine"},Object(i.b)("inlineCode",{parentName:"h3"},"AvSlotMachine")),Object(i.b)("p",null,"GraphQL Server containing different queries and mutation"),Object(i.b)("h4",{id:"exported-class-12"},"Exported Class"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"name")," as ",Object(i.b)("inlineCode",{parentName:"p"},"spc/slotmachine/graphql"),"."),Object(i.b)("h4",{id:"methods-13"},"Methods"),Object(i.b)("h4",{id:"querydata-string"},Object(i.b)("inlineCode",{parentName:"h4"},"query(data: string)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"   query(data, variables) {\n    return this.create({ query: data, variables });\n  }\n")))}p.isMDXComponent=!0}}]);